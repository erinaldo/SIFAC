'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dtDatosRptKardex"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtDatosRptKardex
    Inherits System.Data.DataSet
    
    Private tablevwRptKardex As vwRptKardexDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vwRptKardex")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptKardexDataTable(ds.Tables("vwRptKardex")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vwRptKardex() As vwRptKardexDataTable
        Get
            Return Me.tablevwRptKardex
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dtDatosRptKardex = CType(MyBase.Clone,dtDatosRptKardex)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vwRptKardex")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptKardexDataTable(ds.Tables("vwRptKardex")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevwRptKardex = CType(MyBase.Tables("vwRptKardex"),vwRptKardexDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevwRptKardex) Is Nothing) Then
                Me.tablevwRptKardex.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtDatosRptKardex"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtDatosRptKardex.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevwRptKardex = New vwRptKardexDataTable
        MyBase.Tables.Add(Me.tablevwRptKardex)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevwRptKardex() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtDatosRptKardex = New dtDatosRptKardex
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub vwRptKardexRowChangeEventHandler(ByVal sender As Object, ByVal e As vwRptKardexRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vwRptKardexDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As System.Data.DataColumn
        
        Private columnTransaccion As System.Data.DataColumn
        
        Private columnTipo As System.Data.DataColumn
        
        Private columnProveedor_Cliente As System.Data.DataColumn
        
        Private columnobjRepuestoID As System.Data.DataColumn
        
        Private columnCosto As System.Data.DataColumn
        
        Private columnobjTiendaID As System.Data.DataColumn
        
        Private columnCodigoSucursal As System.Data.DataColumn
        
        Private columnNombreSucursal As System.Data.DataColumn
        
        Private columnEntrada As System.Data.DataColumn
        
        Private columnSalida As System.Data.DataColumn
        
        Private columnCostoProm As System.Data.DataColumn
        
        Private columnDescripcionRepuesto As System.Data.DataColumn
        
        Private columnCodigosProveedor As System.Data.DataColumn
        
        Private columnExistenciaAnterior As System.Data.DataColumn
        
        Private columnExistencia As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vwRptKardex"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransaccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnTransaccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Proveedor_ClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnProveedor_Cliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property objRepuestoIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnobjRepuestoID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property objTiendaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnobjTiendaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntradaColumn() As System.Data.DataColumn
            Get
                Return Me.columnEntrada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalidaColumn() As System.Data.DataColumn
            Get
                Return Me.columnSalida
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromColumn() As System.Data.DataColumn
            Get
                Return Me.columnCostoProm
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionRepuestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcionRepuesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigosProveedorColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigosProveedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaAnteriorColumn() As System.Data.DataColumn
            Get
                Return Me.columnExistenciaAnterior
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaColumn() As System.Data.DataColumn
            Get
                Return Me.columnExistencia
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vwRptKardexRow
            Get
                Return CType(Me.Rows(index),vwRptKardexRow)
            End Get
        End Property
        
        Public Event vwRptKardexRowChanging As vwRptKardexRowChangeEventHandler
        
        Public Event vwRptKardexRowChanged As vwRptKardexRowChangeEventHandler
        
        Public Event vwRptKardexRowDeleting As vwRptKardexRowChangeEventHandler
        
        Public Event vwRptKardexRowDeleted As vwRptKardexRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvwRptKardexRow(ByVal row As vwRptKardexRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvwRptKardexRow( _
                    ByVal Fecha As Date,  _
                    ByVal Transaccion As String,  _
                    ByVal Tipo As String,  _
                    ByVal Proveedor_Cliente As String,  _
                    ByVal objRepuestoID As Integer,  _
                    ByVal Costo As Decimal,  _
                    ByVal objTiendaID As Integer,  _
                    ByVal CodigoSucursal As String,  _
                    ByVal NombreSucursal As String,  _
                    ByVal Entrada As Decimal,  _
                    ByVal Salida As Decimal,  _
                    ByVal CostoProm As Decimal,  _
                    ByVal DescripcionRepuesto As String,  _
                    ByVal CodigosProveedor As String,  _
                    ByVal ExistenciaAnterior As Integer,  _
                    ByVal Existencia As Decimal) As vwRptKardexRow
            Dim rowvwRptKardexRow As vwRptKardexRow = CType(Me.NewRow,vwRptKardexRow)
            rowvwRptKardexRow.ItemArray = New Object() {Fecha, Transaccion, Tipo, Proveedor_Cliente, objRepuestoID, Costo, objTiendaID, CodigoSucursal, NombreSucursal, Entrada, Salida, CostoProm, DescripcionRepuesto, CodigosProveedor, ExistenciaAnterior, Existencia}
            Me.Rows.Add(rowvwRptKardexRow)
            Return rowvwRptKardexRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vwRptKardexDataTable = CType(MyBase.Clone,vwRptKardexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vwRptKardexDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnTransaccion = MyBase.Columns("Transaccion")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnProveedor_Cliente = MyBase.Columns("Proveedor_Cliente")
            Me.columnobjRepuestoID = MyBase.Columns("objRepuestoID")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnobjTiendaID = MyBase.Columns("objTiendaID")
            Me.columnCodigoSucursal = MyBase.Columns("CodigoSucursal")
            Me.columnNombreSucursal = MyBase.Columns("NombreSucursal")
            Me.columnEntrada = MyBase.Columns("Entrada")
            Me.columnSalida = MyBase.Columns("Salida")
            Me.columnCostoProm = MyBase.Columns("CostoProm")
            Me.columnDescripcionRepuesto = MyBase.Columns("DescripcionRepuesto")
            Me.columnCodigosProveedor = MyBase.Columns("CodigosProveedor")
            Me.columnExistenciaAnterior = MyBase.Columns("ExistenciaAnterior")
            Me.columnExistencia = MyBase.Columns("Existencia")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New System.Data.DataColumn("Fecha", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnTransaccion = New System.Data.DataColumn("Transaccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransaccion)
            Me.columnTipo = New System.Data.DataColumn("Tipo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnProveedor_Cliente = New System.Data.DataColumn("Proveedor_Cliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor_Cliente)
            Me.columnobjRepuestoID = New System.Data.DataColumn("objRepuestoID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobjRepuestoID)
            Me.columnCosto = New System.Data.DataColumn("Costo", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnobjTiendaID = New System.Data.DataColumn("objTiendaID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobjTiendaID)
            Me.columnCodigoSucursal = New System.Data.DataColumn("CodigoSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoSucursal)
            Me.columnNombreSucursal = New System.Data.DataColumn("NombreSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreSucursal)
            Me.columnEntrada = New System.Data.DataColumn("Entrada", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntrada)
            Me.columnSalida = New System.Data.DataColumn("Salida", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalida)
            Me.columnCostoProm = New System.Data.DataColumn("CostoProm", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoProm)
            Me.columnDescripcionRepuesto = New System.Data.DataColumn("DescripcionRepuesto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionRepuesto)
            Me.columnCodigosProveedor = New System.Data.DataColumn("CodigosProveedor", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigosProveedor)
            Me.columnExistenciaAnterior = New System.Data.DataColumn("ExistenciaAnterior", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistenciaAnterior)
            Me.columnExistencia = New System.Data.DataColumn("Existencia", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencia)
            Me.columnTransaccion.MaxLength = 38
            Me.columnTipo.AllowDBNull = false
            Me.columnTipo.MaxLength = 12
            Me.columnProveedor_Cliente.MaxLength = 200
            Me.columnobjRepuestoID.AllowDBNull = false
            Me.columnobjTiendaID.AllowDBNull = false
            Me.columnCodigoSucursal.MaxLength = 4
            Me.columnNombreSucursal.AllowDBNull = false
            Me.columnNombreSucursal.MaxLength = 50
            Me.columnCostoProm.AllowDBNull = false
            Me.columnDescripcionRepuesto.AllowDBNull = false
            Me.columnDescripcionRepuesto.MaxLength = 40
            Me.columnCodigosProveedor.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvwRptKardexRow() As vwRptKardexRow
            Return CType(Me.NewRow,vwRptKardexRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vwRptKardexRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vwRptKardexRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vwRptKardexRowChangedEvent) Is Nothing) Then
                RaiseEvent vwRptKardexRowChanged(Me, New vwRptKardexRowChangeEvent(CType(e.Row,vwRptKardexRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vwRptKardexRowChangingEvent) Is Nothing) Then
                RaiseEvent vwRptKardexRowChanging(Me, New vwRptKardexRowChangeEvent(CType(e.Row,vwRptKardexRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vwRptKardexRowDeletedEvent) Is Nothing) Then
                RaiseEvent vwRptKardexRowDeleted(Me, New vwRptKardexRowChangeEvent(CType(e.Row,vwRptKardexRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vwRptKardexRowDeletingEvent) Is Nothing) Then
                RaiseEvent vwRptKardexRowDeleting(Me, New vwRptKardexRowChangeEvent(CType(e.Row,vwRptKardexRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevwRptKardexRow(ByVal row As vwRptKardexRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtDatosRptKardex = New dtDatosRptKardex
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vwRptKardexDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vwRptKardexRow
        Inherits System.Data.DataRow
        
        Private tablevwRptKardex As vwRptKardexDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevwRptKardex = CType(Me.Table,vwRptKardexDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.FechaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Fecha' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.FechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transaccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.TransaccionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Transaccion' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.TransaccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tablevwRptKardex.TipoColumn),String)
            End Get
            Set
                Me(Me.tablevwRptKardex.TipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor_Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.Proveedor_ClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Proveedor_Cliente' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.Proveedor_ClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property objRepuestoID() As Integer
            Get
                Return CType(Me(Me.tablevwRptKardex.objRepuestoIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptKardex.objRepuestoIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.CostoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Costo' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.CostoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property objTiendaID() As Integer
            Get
                Return CType(Me(Me.tablevwRptKardex.objTiendaIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptKardex.objTiendaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoSucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.CodigoSucursalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CodigoSucursal' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.CodigoSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreSucursal() As String
            Get
                Return CType(Me(Me.tablevwRptKardex.NombreSucursalColumn),String)
            End Get
            Set
                Me(Me.tablevwRptKardex.NombreSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entrada() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.EntradaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Entrada' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.EntradaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salida() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.SalidaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Salida' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.SalidaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoProm() As Decimal
            Get
                Return CType(Me(Me.tablevwRptKardex.CostoPromColumn),Decimal)
            End Get
            Set
                Me(Me.tablevwRptKardex.CostoPromColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionRepuesto() As String
            Get
                Return CType(Me(Me.tablevwRptKardex.DescripcionRepuestoColumn),String)
            End Get
            Set
                Me(Me.tablevwRptKardex.DescripcionRepuestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigosProveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.CodigosProveedorColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CodigosProveedor' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.CodigosProveedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExistenciaAnterior() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.ExistenciaAnteriorColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ExistenciaAnterior' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.ExistenciaAnteriorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencia() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptKardex.ExistenciaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Existencia' in table 'vwRptKardex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptKardex.ExistenciaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.FechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablevwRptKardex.FechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransaccionNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.TransaccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransaccionNull()
            Me(Me.tablevwRptKardex.TransaccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedor_ClienteNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.Proveedor_ClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedor_ClienteNull()
            Me(Me.tablevwRptKardex.Proveedor_ClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.CostoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablevwRptKardex.CostoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoSucursalNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.CodigoSucursalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoSucursalNull()
            Me(Me.tablevwRptKardex.CodigoSucursalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntradaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.EntradaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntradaNull()
            Me(Me.tablevwRptKardex.EntradaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalidaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.SalidaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalidaNull()
            Me(Me.tablevwRptKardex.SalidaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigosProveedorNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.CodigosProveedorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigosProveedorNull()
            Me(Me.tablevwRptKardex.CodigosProveedorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciaAnteriorNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.ExistenciaAnteriorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciaAnteriorNull()
            Me(Me.tablevwRptKardex.ExistenciaAnteriorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptKardex.ExistenciaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciaNull()
            Me(Me.tablevwRptKardex.ExistenciaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vwRptKardexRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vwRptKardexRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vwRptKardexRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vwRptKardexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtDatosRptKardexTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vwRptKardexTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vwRptKardex"
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Transaccion", "Transaccion")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Proveedor_Cliente", "Proveedor_Cliente")
            tableMapping.ColumnMappings.Add("objRepuestoID", "objRepuestoID")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("objTiendaID", "objTiendaID")
            tableMapping.ColumnMappings.Add("CodigoSucursal", "CodigoSucursal")
            tableMapping.ColumnMappings.Add("NombreSucursal", "NombreSucursal")
            tableMapping.ColumnMappings.Add("Entrada", "Entrada")
            tableMapping.ColumnMappings.Add("Salida", "Salida")
            tableMapping.ColumnMappings.Add("CostoProm", "CostoProm")
            tableMapping.ColumnMappings.Add("DescripcionRepuesto", "DescripcionRepuesto")
            tableMapping.ColumnMappings.Add("CodigosProveedor", "CodigosProveedor")
            tableMapping.ColumnMappings.Add("ExistenciaAnterior", "ExistenciaAnterior")
            tableMapping.ColumnMappings.Add("Existencia", "Existencia")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCUM.My.MySettings.Default.SCCUMConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Fecha, Transaccion, Tipo, Proveedor_Cliente, objRepuestoID, Costo, objTien"& _ 
                "daID, CodigoSucursal, NombreSucursal, Entrada, Salida, CostoProm, DescripcionRep"& _ 
                "uesto, CodigosProveedor, ExistenciaAnterior, Existencia FROM dbo.vwRptKardex"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtDatosRptKardex.vwRptKardexDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtDatosRptKardex.vwRptKardexDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtDatosRptKardex.vwRptKardexDataTable = New dtDatosRptKardex.vwRptKardexDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
