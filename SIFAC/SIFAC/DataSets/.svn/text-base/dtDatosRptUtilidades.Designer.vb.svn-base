'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dtDatosRptUtilidades"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtDatosRptUtilidades
    Inherits System.Data.DataSet
    
    Private tablevwRptUtilidades As vwRptUtilidadesDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vwRptUtilidades")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptUtilidadesDataTable(ds.Tables("vwRptUtilidades")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vwRptUtilidades() As vwRptUtilidadesDataTable
        Get
            Return Me.tablevwRptUtilidades
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dtDatosRptUtilidades = CType(MyBase.Clone,dtDatosRptUtilidades)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vwRptUtilidades")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptUtilidadesDataTable(ds.Tables("vwRptUtilidades")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevwRptUtilidades = CType(MyBase.Tables("vwRptUtilidades"),vwRptUtilidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevwRptUtilidades) Is Nothing) Then
                Me.tablevwRptUtilidades.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtDatosRptUtilidades"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtDatosRptUtilidades.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevwRptUtilidades = New vwRptUtilidadesDataTable
        MyBase.Tables.Add(Me.tablevwRptUtilidades)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevwRptUtilidades() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtDatosRptUtilidades = New dtDatosRptUtilidades
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub vwRptUtilidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As vwRptUtilidadesRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vwRptUtilidadesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFechaFactura As System.Data.DataColumn
        
        Private columnobjTiendaID As System.Data.DataColumn
        
        Private columnNombreTienda As System.Data.DataColumn
        
        Private columnCodigoTienda As System.Data.DataColumn
        
        Private columnobjRepuestoID As System.Data.DataColumn
        
        Private columnDescripcionCorta As System.Data.DataColumn
        
        Private columnTCantidadFacturada As System.Data.DataColumn
        
        Private columnTPrecio As System.Data.DataColumn
        
        Private columnTDescuento As System.Data.DataColumn
        
        Private columnTCosto As System.Data.DataColumn
        
        Private columnTUtilidad As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vwRptUtilidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property objTiendaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnobjTiendaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreTiendaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreTienda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTiendaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoTienda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property objRepuestoIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnobjRepuestoID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionCortaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcionCorta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCantidadFacturadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTCantidadFacturada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TPrecioColumn() As System.Data.DataColumn
            Get
                Return Me.columnTPrecio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCostoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTCosto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TUtilidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnTUtilidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vwRptUtilidadesRow
            Get
                Return CType(Me.Rows(index),vwRptUtilidadesRow)
            End Get
        End Property
        
        Public Event vwRptUtilidadesRowChanging As vwRptUtilidadesRowChangeEventHandler
        
        Public Event vwRptUtilidadesRowChanged As vwRptUtilidadesRowChangeEventHandler
        
        Public Event vwRptUtilidadesRowDeleting As vwRptUtilidadesRowChangeEventHandler
        
        Public Event vwRptUtilidadesRowDeleted As vwRptUtilidadesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvwRptUtilidadesRow(ByVal row As vwRptUtilidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvwRptUtilidadesRow(ByVal FechaFactura As String, ByVal objTiendaID As Integer, ByVal NombreTienda As String, ByVal CodigoTienda As String, ByVal objRepuestoID As Integer, ByVal DescripcionCorta As String, ByVal TCantidadFacturada As Integer, ByVal TPrecio As Decimal, ByVal TDescuento As Decimal, ByVal TCosto As Decimal, ByVal TUtilidad As Decimal) As vwRptUtilidadesRow
            Dim rowvwRptUtilidadesRow As vwRptUtilidadesRow = CType(Me.NewRow,vwRptUtilidadesRow)
            rowvwRptUtilidadesRow.ItemArray = New Object() {FechaFactura, objTiendaID, NombreTienda, CodigoTienda, objRepuestoID, DescripcionCorta, TCantidadFacturada, TPrecio, TDescuento, TCosto, TUtilidad}
            Me.Rows.Add(rowvwRptUtilidadesRow)
            Return rowvwRptUtilidadesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vwRptUtilidadesDataTable = CType(MyBase.Clone,vwRptUtilidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vwRptUtilidadesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFechaFactura = MyBase.Columns("FechaFactura")
            Me.columnobjTiendaID = MyBase.Columns("objTiendaID")
            Me.columnNombreTienda = MyBase.Columns("NombreTienda")
            Me.columnCodigoTienda = MyBase.Columns("CodigoTienda")
            Me.columnobjRepuestoID = MyBase.Columns("objRepuestoID")
            Me.columnDescripcionCorta = MyBase.Columns("DescripcionCorta")
            Me.columnTCantidadFacturada = MyBase.Columns("TCantidadFacturada")
            Me.columnTPrecio = MyBase.Columns("TPrecio")
            Me.columnTDescuento = MyBase.Columns("TDescuento")
            Me.columnTCosto = MyBase.Columns("TCosto")
            Me.columnTUtilidad = MyBase.Columns("TUtilidad")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFechaFactura = New System.Data.DataColumn("FechaFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFactura)
            Me.columnobjTiendaID = New System.Data.DataColumn("objTiendaID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobjTiendaID)
            Me.columnNombreTienda = New System.Data.DataColumn("NombreTienda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreTienda)
            Me.columnCodigoTienda = New System.Data.DataColumn("CodigoTienda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTienda)
            Me.columnobjRepuestoID = New System.Data.DataColumn("objRepuestoID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobjRepuestoID)
            Me.columnDescripcionCorta = New System.Data.DataColumn("DescripcionCorta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionCorta)
            Me.columnTCantidadFacturada = New System.Data.DataColumn("TCantidadFacturada", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCantidadFacturada)
            Me.columnTPrecio = New System.Data.DataColumn("TPrecio", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTPrecio)
            Me.columnTDescuento = New System.Data.DataColumn("TDescuento", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDescuento)
            Me.columnTCosto = New System.Data.DataColumn("TCosto", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCosto)
            Me.columnTUtilidad = New System.Data.DataColumn("TUtilidad", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUtilidad)
            Me.columnFechaFactura.MaxLength = 30
            Me.columnobjTiendaID.AllowDBNull = false
            Me.columnNombreTienda.AllowDBNull = false
            Me.columnNombreTienda.MaxLength = 50
            Me.columnCodigoTienda.MaxLength = 4
            Me.columnobjRepuestoID.AllowDBNull = false
            Me.columnDescripcionCorta.AllowDBNull = false
            Me.columnDescripcionCorta.MaxLength = 40
            Me.columnTPrecio.ReadOnly = true
            Me.columnTDescuento.ReadOnly = true
            Me.columnTCosto.ReadOnly = true
            Me.columnTUtilidad.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvwRptUtilidadesRow() As vwRptUtilidadesRow
            Return CType(Me.NewRow,vwRptUtilidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vwRptUtilidadesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vwRptUtilidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vwRptUtilidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent vwRptUtilidadesRowChanged(Me, New vwRptUtilidadesRowChangeEvent(CType(e.Row,vwRptUtilidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vwRptUtilidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent vwRptUtilidadesRowChanging(Me, New vwRptUtilidadesRowChangeEvent(CType(e.Row,vwRptUtilidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vwRptUtilidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent vwRptUtilidadesRowDeleted(Me, New vwRptUtilidadesRowChangeEvent(CType(e.Row,vwRptUtilidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vwRptUtilidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent vwRptUtilidadesRowDeleting(Me, New vwRptUtilidadesRowChangeEvent(CType(e.Row,vwRptUtilidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevwRptUtilidadesRow(ByVal row As vwRptUtilidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtDatosRptUtilidades = New dtDatosRptUtilidades
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vwRptUtilidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vwRptUtilidadesRow
        Inherits System.Data.DataRow
        
        Private tablevwRptUtilidades As vwRptUtilidadesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevwRptUtilidades = CType(Me.Table,vwRptUtilidadesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.FechaFacturaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FechaFactura' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.FechaFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property objTiendaID() As Integer
            Get
                Return CType(Me(Me.tablevwRptUtilidades.objTiendaIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptUtilidades.objTiendaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreTienda() As String
            Get
                Return CType(Me(Me.tablevwRptUtilidades.NombreTiendaColumn),String)
            End Get
            Set
                Me(Me.tablevwRptUtilidades.NombreTiendaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTienda() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.CodigoTiendaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CodigoTienda' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.CodigoTiendaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property objRepuestoID() As Integer
            Get
                Return CType(Me(Me.tablevwRptUtilidades.objRepuestoIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptUtilidades.objRepuestoIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionCorta() As String
            Get
                Return CType(Me(Me.tablevwRptUtilidades.DescripcionCortaColumn),String)
            End Get
            Set
                Me(Me.tablevwRptUtilidades.DescripcionCortaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCantidadFacturada() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.TCantidadFacturadaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TCantidadFacturada' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.TCantidadFacturadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TPrecio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.TPrecioColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TPrecio' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.TPrecioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDescuento() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.TDescuentoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TDescuento' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.TDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCosto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.TCostoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TCosto' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.TCostoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TUtilidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptUtilidades.TUtilidadColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TUtilidad' in table 'vwRptUtilidades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptUtilidades.TUtilidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFacturaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.FechaFacturaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFacturaNull()
            Me(Me.tablevwRptUtilidades.FechaFacturaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTiendaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.CodigoTiendaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTiendaNull()
            Me(Me.tablevwRptUtilidades.CodigoTiendaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCantidadFacturadaNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.TCantidadFacturadaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCantidadFacturadaNull()
            Me(Me.tablevwRptUtilidades.TCantidadFacturadaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTPrecioNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.TPrecioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTPrecioNull()
            Me(Me.tablevwRptUtilidades.TPrecioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDescuentoNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.TDescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDescuentoNull()
            Me(Me.tablevwRptUtilidades.TDescuentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCostoNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.TCostoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCostoNull()
            Me(Me.tablevwRptUtilidades.TCostoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTUtilidadNull() As Boolean
            Return Me.IsNull(Me.tablevwRptUtilidades.TUtilidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTUtilidadNull()
            Me(Me.tablevwRptUtilidades.TUtilidadColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vwRptUtilidadesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vwRptUtilidadesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vwRptUtilidadesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vwRptUtilidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtDatosRptUtilidadesTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vwRptUtilidadesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vwRptUtilidades"
            tableMapping.ColumnMappings.Add("FechaFactura", "FechaFactura")
            tableMapping.ColumnMappings.Add("objTiendaID", "objTiendaID")
            tableMapping.ColumnMappings.Add("NombreTienda", "NombreTienda")
            tableMapping.ColumnMappings.Add("CodigoTienda", "CodigoTienda")
            tableMapping.ColumnMappings.Add("objRepuestoID", "objRepuestoID")
            tableMapping.ColumnMappings.Add("DescripcionCorta", "DescripcionCorta")
            tableMapping.ColumnMappings.Add("TCantidadFacturada", "TCantidadFacturada")
            tableMapping.ColumnMappings.Add("TPrecio", "TPrecio")
            tableMapping.ColumnMappings.Add("TDescuento", "TDescuento")
            tableMapping.ColumnMappings.Add("TCosto", "TCosto")
            tableMapping.ColumnMappings.Add("TUtilidad", "TUtilidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCUM.My.MySettings.Default.SCCUMConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FechaFactura, objTiendaID, NombreTienda, CodigoTienda, objRepuestoID, Desc"& _ 
                "ripcionCorta, TCantidadFacturada, TPrecio, TDescuento, TCosto, TUtilidad FROM db"& _ 
                "o.vwRptUtilidades"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtDatosRptUtilidades.vwRptUtilidadesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtDatosRptUtilidades.vwRptUtilidadesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtDatosRptUtilidades.vwRptUtilidadesDataTable = New dtDatosRptUtilidades.vwRptUtilidadesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
