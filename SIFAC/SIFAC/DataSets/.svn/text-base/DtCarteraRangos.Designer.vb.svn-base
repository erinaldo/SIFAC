'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DtCarteraRangos"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DtCarteraRangos
    Inherits System.Data.DataSet
    
    Private tablevwRptCarteraRangos As vwRptCarteraRangosDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vwRptCarteraRangos")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptCarteraRangosDataTable(ds.Tables("vwRptCarteraRangos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vwRptCarteraRangos() As vwRptCarteraRangosDataTable
        Get
            Return Me.tablevwRptCarteraRangos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DtCarteraRangos = CType(MyBase.Clone,DtCarteraRangos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vwRptCarteraRangos")) Is Nothing) Then
                MyBase.Tables.Add(New vwRptCarteraRangosDataTable(ds.Tables("vwRptCarteraRangos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevwRptCarteraRangos = CType(MyBase.Tables("vwRptCarteraRangos"),vwRptCarteraRangosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevwRptCarteraRangos) Is Nothing) Then
                Me.tablevwRptCarteraRangos.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DtCarteraRangos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DtCarteraRangos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevwRptCarteraRangos = New vwRptCarteraRangosDataTable
        MyBase.Tables.Add(Me.tablevwRptCarteraRangos)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevwRptCarteraRangos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DtCarteraRangos = New DtCarteraRangos
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub vwRptCarteraRangosRowChangeEventHandler(ByVal sender As Object, ByVal e As vwRptCarteraRangosRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vwRptCarteraRangosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnobjTiendaID As System.Data.DataColumn
        
        Private columnTienda As System.Data.DataColumn
        
        Private columnCliente As System.Data.DataColumn
        
        Private columnSaldoMora30 As System.Data.DataColumn
        
        Private columnSaldoMora60 As System.Data.DataColumn
        
        Private columnSaldoMoraOver60 As System.Data.DataColumn
        
        Private columnMoras30 As System.Data.DataColumn
        
        Private columnMora60 As System.Data.DataColumn
        
        Private columnMoraOver60 As System.Data.DataColumn
        
        Private columnSfaFacturaID As System.Data.DataColumn
        
        Private columnSccCuentaID As System.Data.DataColumn
        
        Private columnMoraTramiteLegal As System.Data.DataColumn
        
        Private columnSolventes As System.Data.DataColumn
        
        Private columnSaldoMoraTramitaLegal As System.Data.DataColumn
        
        Private columnSaldo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vwRptCarteraRangos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property objTiendaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnobjTiendaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TiendaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTienda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoMora30Column() As System.Data.DataColumn
            Get
                Return Me.columnSaldoMora30
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoMora60Column() As System.Data.DataColumn
            Get
                Return Me.columnSaldoMora60
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoMoraOver60Column() As System.Data.DataColumn
            Get
                Return Me.columnSaldoMoraOver60
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moras30Column() As System.Data.DataColumn
            Get
                Return Me.columnMoras30
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mora60Column() As System.Data.DataColumn
            Get
                Return Me.columnMora60
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoraOver60Column() As System.Data.DataColumn
            Get
                Return Me.columnMoraOver60
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SfaFacturaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSfaFacturaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SccCuentaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSccCuentaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoraTramiteLegalColumn() As System.Data.DataColumn
            Get
                Return Me.columnMoraTramiteLegal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolventesColumn() As System.Data.DataColumn
            Get
                Return Me.columnSolventes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoMoraTramitaLegalColumn() As System.Data.DataColumn
            Get
                Return Me.columnSaldoMoraTramitaLegal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vwRptCarteraRangosRow
            Get
                Return CType(Me.Rows(index),vwRptCarteraRangosRow)
            End Get
        End Property
        
        Public Event vwRptCarteraRangosRowChanging As vwRptCarteraRangosRowChangeEventHandler
        
        Public Event vwRptCarteraRangosRowChanged As vwRptCarteraRangosRowChangeEventHandler
        
        Public Event vwRptCarteraRangosRowDeleting As vwRptCarteraRangosRowChangeEventHandler
        
        Public Event vwRptCarteraRangosRowDeleted As vwRptCarteraRangosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvwRptCarteraRangosRow(ByVal row As vwRptCarteraRangosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvwRptCarteraRangosRow(ByVal objTiendaID As Integer, ByVal Tienda As String, ByVal Cliente As String, ByVal SaldoMora30 As Decimal, ByVal SaldoMora60 As Decimal, ByVal SaldoMoraOver60 As Decimal, ByVal Moras30 As Integer, ByVal Mora60 As Integer, ByVal MoraOver60 As Integer, ByVal SfaFacturaID As Integer, ByVal SccCuentaID As String, ByVal MoraTramiteLegal As Integer, ByVal Solventes As Integer, ByVal SaldoMoraTramitaLegal As Decimal, ByVal Saldo As Decimal) As vwRptCarteraRangosRow
            Dim rowvwRptCarteraRangosRow As vwRptCarteraRangosRow = CType(Me.NewRow,vwRptCarteraRangosRow)
            rowvwRptCarteraRangosRow.ItemArray = New Object() {objTiendaID, Tienda, Cliente, SaldoMora30, SaldoMora60, SaldoMoraOver60, Moras30, Mora60, MoraOver60, SfaFacturaID, SccCuentaID, MoraTramiteLegal, Solventes, SaldoMoraTramitaLegal, Saldo}
            Me.Rows.Add(rowvwRptCarteraRangosRow)
            Return rowvwRptCarteraRangosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vwRptCarteraRangosDataTable = CType(MyBase.Clone,vwRptCarteraRangosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vwRptCarteraRangosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnobjTiendaID = MyBase.Columns("objTiendaID")
            Me.columnTienda = MyBase.Columns("Tienda")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnSaldoMora30 = MyBase.Columns("SaldoMora30")
            Me.columnSaldoMora60 = MyBase.Columns("SaldoMora60")
            Me.columnSaldoMoraOver60 = MyBase.Columns("SaldoMoraOver60")
            Me.columnMoras30 = MyBase.Columns("Moras30")
            Me.columnMora60 = MyBase.Columns("Mora60")
            Me.columnMoraOver60 = MyBase.Columns("MoraOver60")
            Me.columnSfaFacturaID = MyBase.Columns("SfaFacturaID")
            Me.columnSccCuentaID = MyBase.Columns("SccCuentaID")
            Me.columnMoraTramiteLegal = MyBase.Columns("MoraTramiteLegal")
            Me.columnSolventes = MyBase.Columns("Solventes")
            Me.columnSaldoMoraTramitaLegal = MyBase.Columns("SaldoMoraTramitaLegal")
            Me.columnSaldo = MyBase.Columns("Saldo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnobjTiendaID = New System.Data.DataColumn("objTiendaID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobjTiendaID)
            Me.columnTienda = New System.Data.DataColumn("Tienda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTienda)
            Me.columnCliente = New System.Data.DataColumn("Cliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnSaldoMora30 = New System.Data.DataColumn("SaldoMora30", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoMora30)
            Me.columnSaldoMora60 = New System.Data.DataColumn("SaldoMora60", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoMora60)
            Me.columnSaldoMoraOver60 = New System.Data.DataColumn("SaldoMoraOver60", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoMoraOver60)
            Me.columnMoras30 = New System.Data.DataColumn("Moras30", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoras30)
            Me.columnMora60 = New System.Data.DataColumn("Mora60", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMora60)
            Me.columnMoraOver60 = New System.Data.DataColumn("MoraOver60", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoraOver60)
            Me.columnSfaFacturaID = New System.Data.DataColumn("SfaFacturaID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSfaFacturaID)
            Me.columnSccCuentaID = New System.Data.DataColumn("SccCuentaID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSccCuentaID)
            Me.columnMoraTramiteLegal = New System.Data.DataColumn("MoraTramiteLegal", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoraTramiteLegal)
            Me.columnSolventes = New System.Data.DataColumn("Solventes", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolventes)
            Me.columnSaldoMoraTramitaLegal = New System.Data.DataColumn("SaldoMoraTramitaLegal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoMoraTramitaLegal)
            Me.columnSaldo = New System.Data.DataColumn("Saldo", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnobjTiendaID.AllowDBNull = false
            Me.columnTienda.AllowDBNull = false
            Me.columnTienda.MaxLength = 50
            Me.columnCliente.MaxLength = 255
            Me.columnSfaFacturaID.AllowDBNull = false
            Me.columnSccCuentaID.AllowDBNull = false
            Me.columnSccCuentaID.MaxLength = 15
            Me.columnSaldo.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvwRptCarteraRangosRow() As vwRptCarteraRangosRow
            Return CType(Me.NewRow,vwRptCarteraRangosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vwRptCarteraRangosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vwRptCarteraRangosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vwRptCarteraRangosRowChangedEvent) Is Nothing) Then
                RaiseEvent vwRptCarteraRangosRowChanged(Me, New vwRptCarteraRangosRowChangeEvent(CType(e.Row,vwRptCarteraRangosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vwRptCarteraRangosRowChangingEvent) Is Nothing) Then
                RaiseEvent vwRptCarteraRangosRowChanging(Me, New vwRptCarteraRangosRowChangeEvent(CType(e.Row,vwRptCarteraRangosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vwRptCarteraRangosRowDeletedEvent) Is Nothing) Then
                RaiseEvent vwRptCarteraRangosRowDeleted(Me, New vwRptCarteraRangosRowChangeEvent(CType(e.Row,vwRptCarteraRangosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vwRptCarteraRangosRowDeletingEvent) Is Nothing) Then
                RaiseEvent vwRptCarteraRangosRowDeleting(Me, New vwRptCarteraRangosRowChangeEvent(CType(e.Row,vwRptCarteraRangosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevwRptCarteraRangosRow(ByVal row As vwRptCarteraRangosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DtCarteraRangos = New DtCarteraRangos
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vwRptCarteraRangosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vwRptCarteraRangosRow
        Inherits System.Data.DataRow
        
        Private tablevwRptCarteraRangos As vwRptCarteraRangosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevwRptCarteraRangos = CType(Me.Table,vwRptCarteraRangosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property objTiendaID() As Integer
            Get
                Return CType(Me(Me.tablevwRptCarteraRangos.objTiendaIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.objTiendaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tienda() As String
            Get
                Return CType(Me(Me.tablevwRptCarteraRangos.TiendaColumn),String)
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.TiendaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.ClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Cliente' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.ClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoMora30() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.SaldoMora30Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SaldoMora30' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SaldoMora30Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoMora60() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.SaldoMora60Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SaldoMora60' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SaldoMora60Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoMoraOver60() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.SaldoMoraOver60Column),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SaldoMoraOver60' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SaldoMoraOver60Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moras30() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.Moras30Column),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Moras30' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.Moras30Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mora60() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.Mora60Column),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Mora60' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.Mora60Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoraOver60() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.MoraOver60Column),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MoraOver60' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.MoraOver60Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SfaFacturaID() As Integer
            Get
                Return CType(Me(Me.tablevwRptCarteraRangos.SfaFacturaIDColumn),Integer)
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SfaFacturaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SccCuentaID() As String
            Get
                Return CType(Me(Me.tablevwRptCarteraRangos.SccCuentaIDColumn),String)
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SccCuentaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoraTramiteLegal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.MoraTramiteLegalColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MoraTramiteLegal' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.MoraTramiteLegalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solventes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.SolventesColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Solventes' in table 'vwRptCarteraRangos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SolventesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoMoraTramitaLegal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevwRptCarteraRangos.SaldoMoraTramitaLegalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SaldoMoraTramitaLegal' in table 'vwRptCarteraRangos' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SaldoMoraTramitaLegalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Decimal
            Get
                Return CType(Me(Me.tablevwRptCarteraRangos.SaldoColumn),Decimal)
            End Get
            Set
                Me(Me.tablevwRptCarteraRangos.SaldoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.ClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablevwRptCarteraRangos.ClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoMora30Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.SaldoMora30Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoMora30Null()
            Me(Me.tablevwRptCarteraRangos.SaldoMora30Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoMora60Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.SaldoMora60Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoMora60Null()
            Me(Me.tablevwRptCarteraRangos.SaldoMora60Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoMoraOver60Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.SaldoMoraOver60Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoMoraOver60Null()
            Me(Me.tablevwRptCarteraRangos.SaldoMoraOver60Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoras30Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.Moras30Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoras30Null()
            Me(Me.tablevwRptCarteraRangos.Moras30Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMora60Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.Mora60Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMora60Null()
            Me(Me.tablevwRptCarteraRangos.Mora60Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoraOver60Null() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.MoraOver60Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoraOver60Null()
            Me(Me.tablevwRptCarteraRangos.MoraOver60Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoraTramiteLegalNull() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.MoraTramiteLegalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoraTramiteLegalNull()
            Me(Me.tablevwRptCarteraRangos.MoraTramiteLegalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolventesNull() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.SolventesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolventesNull()
            Me(Me.tablevwRptCarteraRangos.SolventesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoMoraTramitaLegalNull() As Boolean
            Return Me.IsNull(Me.tablevwRptCarteraRangos.SaldoMoraTramitaLegalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoMoraTramitaLegalNull()
            Me(Me.tablevwRptCarteraRangos.SaldoMoraTramitaLegalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vwRptCarteraRangosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vwRptCarteraRangosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vwRptCarteraRangosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vwRptCarteraRangosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DtCarteraRangosTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vwRptCarteraRangosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vwRptCarteraRangos"
            tableMapping.ColumnMappings.Add("objTiendaID", "objTiendaID")
            tableMapping.ColumnMappings.Add("Tienda", "Tienda")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("SaldoMora30", "SaldoMora30")
            tableMapping.ColumnMappings.Add("SaldoMora60", "SaldoMora60")
            tableMapping.ColumnMappings.Add("SaldoMoraOver60", "SaldoMoraOver60")
            tableMapping.ColumnMappings.Add("Moras30", "Moras30")
            tableMapping.ColumnMappings.Add("Mora60", "Mora60")
            tableMapping.ColumnMappings.Add("MoraOver60", "MoraOver60")
            tableMapping.ColumnMappings.Add("SfaFacturaID", "SfaFacturaID")
            tableMapping.ColumnMappings.Add("SccCuentaID", "SccCuentaID")
            tableMapping.ColumnMappings.Add("MoraTramiteLegal", "MoraTramiteLegal")
            tableMapping.ColumnMappings.Add("Solventes", "Solventes")
            tableMapping.ColumnMappings.Add("SaldoMoraTramitaLegal", "SaldoMoraTramitaLegal")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SCCUM.My.MySettings.Default.SCCUMConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     vwRptCarteraRangos.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         vwRptCarteraRangos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DtCarteraRangos.vwRptCarteraRangosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DtCarteraRangos.vwRptCarteraRangosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DtCarteraRangos.vwRptCarteraRangosDataTable = New DtCarteraRangos.vwRptCarteraRangosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
